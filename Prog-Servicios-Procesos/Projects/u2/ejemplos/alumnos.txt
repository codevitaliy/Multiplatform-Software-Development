import java.util.concurrent.ThreadLocalRandom;

public class ExamenAula {

    public static void main(String[] args) {
        Aula aula = new Aula();

        Thread profesor = new Thread(new Profesor(aula));
        profesor.start();

        for (int i = 0; i < 10; i++) {
            new Thread(new Estudiante(i + 1, aula)).start();
        }
    }
}

class Aula {

    private boolean claseComenzada = false;
    private boolean examenIniciado = false;
    private int estudiantesEnAula = 0;

    public synchronized void comenzarClase() {
        System.out.println("¡La clase ha comenzado!");
        claseComenzada = true;
        notifyAll();
    }

    public synchronized void registrarAsistencia() {
        estudiantesEnAula++;
        System.out.println("Estudiante presente. Total: " + estudiantesEnAula);
    }

    public synchronized void iniciarExamen() {
        while (!claseComenzada) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return;
            }
        }

        System.out.println("¡Examen iniciado!");
        examenIniciado = true;
        notifyAll();
    }

    public synchronized void realizarExamen(int estudianteId) {
        while (!examenIniciado) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return;
            }
        }

        int tiempoExamen = ThreadLocalRandom.current().nextInt(5, 16);
        System.out.println("Estudiante " + estudianteId + " está realizando el examen durante " + tiempoExamen + " minutos.");

        try {
            Thread.sleep(tiempoExamen * 1000); // Convertir minutos a milisegundos
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        System.out.println("Estudiante " + estudianteId + " ha completado el examen.");
        estudiantesEnAula--;

        if (estudiantesEnAula == 0) {
            notifyAll(); // Notificar al profesor que todos los estudiantes han terminado el examen
        }
    }

    public synchronized void finalizarClase() {
        while (estudiantesEnAula > 0) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return;
            }
        }

        System.out.println("¡La clase ha terminado!");
    }
}

class Profesor implements Runnable {

    private final Aula aula;

    public Profesor(Aula aula) {
        this.aula = aula;
    }

    @Override
    public void run() {
        aula.comenzarClase();
        aula.iniciarExamen();
        aula.finalizarClase();
    }
}

class Estudiante implements Runnable {

    private final int estudianteId;
    private final Aula aula;

    public Estudiante(int estudianteId, Aula aula) {
        this.estudianteId = estudianteId;
        this.aula = aula;
    }

    @Override
    public void run() {
        aula.registrarAsistencia();
        aula.realizarExamen(estudianteId);
    }
}
